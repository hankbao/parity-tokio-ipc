var N=null,E="",T="t",U="u",searchIndex={};
var R=["result","Stream of incoming connections","incoming","string","handle","ipcconnection","try_from","try_into","borrow_mut","borrow","type_id","typeid","SecurityAttributes","Endpoint","IpcConnection","RemoteId","Incoming"];

searchIndex["parity_tokio_ipc"]={"doc":"Tokio IPC transport. Under the hood uses Unix Domain…","i":[[3,R[12],"parity_tokio_ipc","A NOOP struct for bringing the API between Windows and…",N,N],[3,R[13],E,"Endpoint for IPC transport",N,N],[3,R[15],E,"Remote connection data, if any available",N,N],[3,R[16],E,R[1],N,N],[3,R[14],E,"IPC Connection",N,N],[5,"dummy_endpoint",E,"For testing/examples",N,[[],[R[3]]]],[11,"empty",E,"New default security attributes.",0,[[],["self"]]],[11,"allow_everyone_connect",E,"New security attributes that allow everyone to connect.",0,[[],[R[0]]]],[11,"allow_everyone_create",E,"New security attributes that allow everyone to create.",0,[[],[R[0]]]],[11,R[2],E,R[1],1,[[[R[4]]],[[R[2]],[R[0],[R[2]]]]]],[11,"set_security_attributes",E,"Set security attributes for the connection",1,[[["self"],["securityattributes"]]]],[11,"path",E,"Returns the path of the endpoint.",1,[[["self"]],["str"]]],[11,"new",E,"New IPC endpoint at the given path",1,[[[R[3]]],["self"]]],[11,"connect",E,"Make new connection using the provided path and running…",2,[[[R[4]],["path"],["asref",["path"]]],[[R[5]],[R[0],[R[5]]]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[6],E,E,0,[[[U]],[R[0]]]],[11,R[7],E,E,0,[[],[R[0]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[R[11]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[6],E,E,1,[[[U]],[R[0]]]],[11,R[7],E,E,1,[[],[R[0]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[T]]],[11,R[10],E,E,1,[[["self"]],[R[11]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[6],E,E,3,[[[U]],[R[0]]]],[11,R[7],E,E,3,[[],[R[0]]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[R[11]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[6],E,E,4,[[[U]],[R[0]]]],[11,R[7],E,E,4,[[],[R[0]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[R[11]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[6],E,E,2,[[[U]],[R[0]]]],[11,R[7],E,E,2,[[],[R[0]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[R[11]]]],[11,"read",E,E,2,[[["self"]],[["usize"],[R[0],["usize"]]]]],[11,"write",E,E,2,[[["self"]],[["usize"],[R[0],["usize"]]]]],[11,"flush",E,E,2,[[["self"]],[R[0]]]],[11,"poll",E,E,4,[[["self"]],[["option"],["error"],["poll",["option","error"]]]]],[11,"shutdown",E,E,2,[[["self"]],[["poll",["error"]],["error"]]]],[11,"write_buf",E,E,2,[[["self"],["b"]],[["error"],["usize"],["poll",["usize","error"]]]]],[11,"prepare_uninitialized_buffer",E,E,2,[[["self"]],["bool"]]],[11,"read_buf",E,E,2,[[["self"],["b"]],[["error"],["usize"],["poll",["usize","error"]]]]]],"p":[[3,R[12]],[3,R[13]],[3,R[14]],[3,R[15]],[3,R[16]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);